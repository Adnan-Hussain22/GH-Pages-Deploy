{"version":3,"sources":["Redux/Reducers/authReducers.js","Redux/Reducers/miscellaneousReducers.js","Redux/Reducers/meetingReducers.js","Redux/rootReducer.js","Redux/store.js","Redux/Actions/authActions.js","Screens/Login/login.js","Components/Kid/kid.js","Components/Judge/judge.js","Config/Routes/DashboardRoutes.js","Screens/Dashboard/Dashoard.js","Config/Routes/index.js","serviceWorker.js","index.js"],"names":["reducer","state","arguments","length","undefined","action","type","Object","objectSpread","user","data","profile","loader","list","combineReducers","authReducers","miscellaneousReducers","meetingsReducers","store","createStore","rootReducer","updateUser","removeUser","updateProfile","Login","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleLogin","history","push","pathname","stars","available","nextProps","preProps","setState","react_default","a","createElement","onClick","React","Component","withRouter","connect","console","log","dispatch","authActions","Kid","Judge","Routes","Route","exact","path","render","childProps","kid","judge","Dashboard","handleLogout","handleToggleComponent","toggleComponent","DashboardRoutes","BrowserRouter","basename","process","component","Screens","Boolean","window","location","hostname","match","ReactDOM","es","Config_Routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a34a7b6.chunk.js","sourcesContent":["const reducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_USER\": {\r\n      return { ...state, user: action.data };\r\n    }\r\n\r\n    case \"REMOVE_USER\": {\r\n      return { ...state, user: null };\r\n    }\r\n\r\n    case \"UPDATE_PROFILE\": {\r\n      return { ...state, profile: action.data };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","const reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case \"UPDATE_LOADER\": {\r\n        return { ...state, loader: action.data };\r\n      }\r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  };\r\n  \r\n  export default reducer;\r\n  ","const reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case \"UPDATE_MEETINGLIST\": {\r\n        return { ...state, list: action.data };\r\n      }\r\n  \r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  };\r\n  \r\n  export default reducer;\r\n  ","// combine all the reducers here and export it\r\nimport {combineReducers} from 'redux'\r\nimport authReducers from './Reducers/authReducers';\r\nimport miscellaneousReducers from './Reducers/miscellaneousReducers';\r\nimport meetingsReducers from './Reducers/meetingReducers';\r\n\r\nexport default combineReducers({\r\n    authReducers,miscellaneousReducers,meetingsReducers\r\n})","import { createStore } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","const updateUser = data => {\r\n  return {\r\n    type: \"UPDATE_USER\",\r\n    data\r\n  };\r\n};\r\n\r\nconst removeUser = () => {\r\n  return {\r\n    type: \"REMOVE_USER\"\r\n  };\r\n};\r\n\r\nconst updateProfile = data => {\r\n  return {\r\n    type: \"UPDATE_PROFILE\",\r\n    data\r\n  };\r\n};\r\n\r\nexport { updateUser, removeUser, updateProfile };\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { authActions } from \"../../Redux/Actions\";\r\nimport { withRouter } from \"react-router-dom\";\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { stars: 0, available: false };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps, preProps) {\r\n    this.setState({ user: nextProps.user });\r\n  }\r\n\r\n  handleLogin = () => {\r\n    this.props.history.push({ pathname: \"/dashboard\" });\r\n    // setTimeout(()=>{\r\n    // },1000)\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Login</h1>\r\n        <button onClick={this.handleLogin}>Login Karo</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//THis Function will get the updated store\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  return {\r\n    user: state.authReducers.user\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateUser: user => dispatch(authActions.updateUser(user)),\r\n    removeUser: () => dispatch(authActions.removeUser())\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Login)\r\n);\r\n","import React from \"react\";\r\nimport { authActions } from \"../../Redux/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nclass Kid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps, preProps) {\r\n    console.log(\"Kid Props==>\", nextProps);\r\n  }\r\n\r\n  render() {\r\n    return <h3>Kid</h3>;\r\n  }\r\n}\r\n\r\n//THis Function will get the updated store\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  return {\r\n    user: state.authReducers.user\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateUser: user => dispatch(authActions.updateUser(user)),\r\n    removeUser: () => dispatch(authActions.removeUser())\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Kid)\r\n);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { authActions } from \"../../Redux/Actions\";\r\nimport { withRouter } from \"react-router-dom\";\r\nclass Judge extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { stars: 0, available: false };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps, preProps) {\r\n    console.log(\"Judge Props==>\", nextProps);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Judge</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//THis Function will get the updated store\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  return {\r\n    user: state.authReducers.user\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateUser: user => dispatch(authActions.updateUser(user)),\r\n    removeUser: () => dispatch(authActions.removeUser())\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Judge)\r\n);\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport * as DasboardComponents from \"../../Components\";\r\n\r\nconst Routes = props => (\r\n  <div>\r\n    <Route\r\n      exact\r\n      path=\"/dashboard/\"\r\n      render={childProps => <DasboardComponents.Kid {...props} />}\r\n    />\r\n    <Route\r\n      exact\r\n      path=\"/dashboard/Judge\"\r\n      render={childProps => <DasboardComponents.Judge {...props} />}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { authActions } from \"../../Redux/Actions\";\r\nimport DashboardRoutes from \"../../Config/Routes/DashboardRoutes\";\r\nimport {withRouter} from 'react-router-dom'\r\nclass Dashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { stars: 0, available: false };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps, preProps) {\r\n    this.setState({ user: nextProps.user });\r\n  }\r\n\r\n  handleLogout = () => {\r\n    this.props.removeUser();\r\n    this.props.history.push({ pathname: \"/\" });\r\n  };\r\n\r\n  handleToggleComponent = () => {\r\n    if (!this.state.toggleComponent) {\r\n      this.props.history.push({ pathname: \"/dashboard/Judge\" });\r\n    } else this.props.history.push({ pathname: \"/dashboard/\" });\r\n    this.setState({ toggleComponent: !this.state.toggleComponent });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Dashboard</h1>\r\n        <DashboardRoutes />\r\n        <button onClick={this.handleToggleComponent}>Toggle</button>\r\n        <button onClick={this.handleLogout}>Logout Man</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//THis Function will get the updated store\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  return {\r\n    user: state.authReducers.user\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateUser: user => dispatch(authActions.updateUser(user)),\r\n    removeUser: () => dispatch(authActions.removeUser())\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Dashboard)\r\n);\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport * as Screens from \"../../Screens\";\r\n\r\nconst Routes = props => (\r\n  <Router basename={process.env.PUBLIC_URL}>\r\n    <div>\r\n      <Route exact path=\"/\" component={Screens.Login} />\r\n      <Route path=\"/dashboard\" component={Screens.Dashboard} />\r\n    </div>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport IndexRoutes from \"./Config/Routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      <IndexRoutes />\n    </div>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}