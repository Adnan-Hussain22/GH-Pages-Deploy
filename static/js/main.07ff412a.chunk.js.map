{"version":3,"sources":["Redux/Reducers/authReducers.js","Redux/Reducers/miscellaneousReducers.js","Redux/Reducers/meetingReducers.js","Redux/rootReducer.js","Redux/store.js","Redux/Actions/authActions.js","Components/Kid/kid.js","Components/Judge/judge.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","arguments","length","undefined","action","type","Object","objectSpread","user","data","profile","loader","list","combineReducers","authReducers","miscellaneousReducers","meetingsReducers","store","createStore","rootReducer","updateUser","removeUser","updateProfile","Kid","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nextProps","preProps","console","log","react_default","a","createElement","React","Component","connect","dispatch","authActions","Judge","stars","available","App","toggleComponent","mail","_this2","className","kid","judge","onClick","setState","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07ff412a.chunk.js","sourcesContent":["const reducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_USER\": {\r\n      return { ...state, user: action.data };\r\n    }\r\n\r\n    case \"REMOVE_USER\": {\r\n      return { ...state, user: null };\r\n    }\r\n\r\n    case \"UPDATE_PROFILE\": {\r\n      return { ...state, profile: action.data };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","const reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case \"UPDATE_LOADER\": {\r\n        return { ...state, loader: action.data };\r\n      }\r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  };\r\n  \r\n  export default reducer;\r\n  ","const reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case \"UPDATE_MEETINGLIST\": {\r\n        return { ...state, list: action.data };\r\n      }\r\n  \r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  };\r\n  \r\n  export default reducer;\r\n  ","// combine all the reducers here and export it\r\nimport {combineReducers} from 'redux'\r\nimport authReducers from './Reducers/authReducers';\r\nimport miscellaneousReducers from './Reducers/miscellaneousReducers';\r\nimport meetingsReducers from './Reducers/meetingReducers';\r\n\r\nexport default combineReducers({\r\n    authReducers,miscellaneousReducers,meetingsReducers\r\n})","import { createStore } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","const updateUser = data => {\r\n  return {\r\n    type: \"UPDATE_USER\",\r\n    data\r\n  };\r\n};\r\n\r\nconst removeUser = () => {\r\n  return {\r\n    type: \"REMOVE_USER\"\r\n  };\r\n};\r\n\r\nconst updateProfile = data => {\r\n  return {\r\n    type: \"UPDATE_PROFILE\",\r\n    data\r\n  };\r\n};\r\n\r\nexport { updateUser, removeUser, updateProfile };\r\n","import React from \"react\";\r\nimport { authActions } from \"../../Redux/Actions\";\r\nimport {connect} from 'react-redux'\r\nclass Kid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps,preProps){\r\n    console.log('Kid Props==>',nextProps);\r\n  }\r\n\r\n  render() {\r\n    return <h1>Kid</h1>;\r\n  }\r\n}\r\n\r\n//THis Function will get the updated store\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  return {\r\n    user: state.authReducers.user\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateUser: user => dispatch(authActions.updateUser(user)),\r\n    removeUser: () => dispatch(authActions.removeUser())\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Kid);\r\n","import React from \"react\";\r\nimport {connect} from 'react-redux'\r\nimport { authActions } from \"../../Redux/Actions\";\r\nclass Judge extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { stars: 0, available: false };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps,preProps){\r\n    console.log('Judge Props==>',nextProps);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Judge</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//THis Function will get the updated store\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  return {\r\n    user: state.authReducers.user\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateUser: user => dispatch(authActions.updateUser(user)),\r\n    removeUser: () => dispatch(authActions.removeUser())\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Judge);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { authActions } from \"./Redux/Actions\";\nimport { connect } from \"react-redux\";\nimport { Kid, Judge } from \"./Components\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggleComponent: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.updateUser({\n      mail: \"email\"\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.toggleComponent && <Kid />}\n        {!this.state.toggleComponent && <Judge />}\n        <button\n          onClick={() =>\n            this.setState({ toggleComponent: !this.state.toggleComponent })\n          }\n        >\n          Toggle\n        </button>\n      </div>\n    );\n  }\n}\n\n//THis Function will get the updated store\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    user: state.authReducers.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateUser: user => dispatch(authActions.updateUser(user)),\n    removeUser: () => dispatch(authActions.removeUser())\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}